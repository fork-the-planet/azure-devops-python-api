# This Yaml Document has been converted by ESAI Yaml Pipeline Conversion Tool.
# Please make sure to check all the converted content, it is your team's responsibility to make sure that the pipeline is still valid and functions as expected.
# This pipeline will be extended to the MicroBuild template
trigger:
  branches:
    include:
    - dev
    - master
    - releases/vsts
  batch: True
schedules:
- cron: 0 6 * * 1
  branches:
    include:
    - refs/heads/dev
  always: true
resources:
  repositories:
  - repository: self
    type: git
    ref: refs/heads/dev
  - repository: MicroBuildTemplate
    type: git
    name: 1ESPipelineTemplates/MicroBuildTemplate
    ref: refs/tags/release
extends:
  template: azure-pipelines/MicroBuild.1ES.Official.yml@MicroBuildTemplate
  parameters:
    sdl:
      sourceAnalysisPool: 1ESPtTfsAgentBuildPoolSDL
    pool:
      name: 1ESPtTfsAgentBuildPool1
    customBuildTags:
    - ES365AIMigrationTooling
    stages:
    - stage: stage
      jobs:
      - job: Phase_1
        displayName: Phase 1
        cancelTimeoutInMinutes: 1
        pool:
          name: 1ESPtTfsAgentBuildPool1
        steps:
        - checkout: self
          clean: true
          fetchTags: true
          persistCredentials: True
        - task: UsePythonVersion@0
          displayName: Use Python 3.x
        - task: PowerShell@2
          name: PowerShell4
          displayName: Create Virtual Environment
          inputs:
            targetType: inline
            script: >-
              .\scripts\windows\init.ps1 if ($LASTEXITCODE -ne 0) {
                Write-Host "##vso[task.logissue type=error;] init script failed."
                Exit $LASTEXITCODE
              } "&" python -m pip install -U pip setuptools
        - task: Bash@3
          name: ShellScript1
          displayName: Update Version
          inputs:
            filePath: scripts/ci/version.sh
            arguments: $(Build.BuildNumber)
            script: >
              #!/usr/bin/env bash
              # Update the version strings in the source code
              # Input:
              #   $1 - the version string, if omitted, use ${BUILD_BUILDID}
              version=$1      
      
              if [ -z ${version} ]; then
                  version=${BUILD_BUILDID}
              fi      
      
              if [ -z ${version} ]; then
                  echo 'Missing version string'
                  exit 1
              fi      
      
              echo "Add dev version suffix: $version"
            
              platform=`uname`
            
              echo "Platform: $platform"
            
              pattern="s/^VERSION = [\"']\(.*\)[\"']/VERSION = \"\1.dev$version\"/"
            
              if [ "${platform}" == "MSYS_NT-10.0" ]; then
                  # On preview version of sh build task, the script will pick up the wrong version of find.exe
                  find="C:\Program Files\Git\usr\bin\find.exe"
              else
                  find="find"
              fi
      
              for each in $("${find}" . -name setup.py); do
                  if [ "$platform" == "Darwin" ]; then
                      sed -i "" "${pattern}" "${each}"
                      rc=$?; if [[ ${rc} != 0 ]]; then exit ${rc}; fi
                  else
                      sed -i "${pattern}" "${each}"
                      rc=$?; if [[ ${rc} != 0 ]]; then exit ${rc}; fi
                  fi
              done
      
      
              for each in $("${find}" . -name version.py); do
                  if [ "$platform" == "Darwin" ]; then
                      sed -i "" "${pattern}" "${each}"
                      rc=$?; if [[ ${rc} != 0 ]]; then exit ${rc}; fi
                  else
                      sed -i "${pattern}" "${each}"
                      rc=$?; if [[ ${rc} != 0 ]]; then exit ${rc}; fi
                  fi
              done
        - task: PowerShell@2
          name: PowerShell1
          displayName: Compile All
          timeoutInMinutes: 1
          inputs:
            targetType: inline
            script: >-
              .\scripts\windows\init.ps1 if ($LASTEXITCODE -ne 0) {
                Write-Host "##vso[task.logissue type=error;] init script failed."
                Exit $LASTEXITCODE
              } & python -m compileall .
